
Podemos crear nuestras propias anotaciones, como por ejemplo:

static Stream<Arguments> arguments = Stream.of(Arguments.of(null, true),
            Arguments.of("", true),
            Arguments.of("", true),
            Arguments.of("    ", true),
            Arguments.of(" NO VACIA ", false));

@ParameterizedTest
@VariableSource("arguments")
public void testCadenaVacia4(String input, boolean valorEsperado) {
      ssertEquals(valorEsperado, cadenas.esBlanco(input));
}

Esto con el fin de crear una anotacion llamada @VariableSource que nos permita pasar un conjunto de datos a un test parametrizado.

Esto se hace creando una anotacion en el paquete de test. Ejemplo:

import org.junit.jupiter.params.provider.ArgumentsSource;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Documented
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@ArgumentsSource(VariableArgumentsProvider.class)
// implementaremos la clase que hara que la anotacion sea generica para cualquier tipo de Stram
public @interface VariableSource {

    String value();
}

Luego, debemos crearuna clase VariableArgumentsProvider

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import org.junit.jupiter.params.support.AnnotationConsumer;

import java.lang.reflect.Field;
import java.util.stream.Stream;

public class VariableArgumentsProvider implements ArgumentsProvider, AnnotationConsumer<VariableSource> {

    private String variableName;

    @Override
    public void accept(VariableSource variableSource) {
        // Agarra la variable value de la anotacion VariableSource y guardarla en un sitio
        variableName = variableSource.value();
    }

    @Override
    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
        // Aqui se implementa la logica para generar los argumentos
        // Por ejemplo, podríamos usar la variableName para obtener datos de una fuente externa
        // o simplemente retornar un Stream de Arguments con datos de prueba.

        return context.getTestClass()
                .map(this::getField)
                .map(this::getValue)
                .orElseThrow(() -> new IllegalArgumentException("Failed to load test arguments"));
    }

    private Field getField(Class<?> clazz) {
        try {
            return clazz.getDeclaredField(variableName);
        } catch (Exception e) {
            return null;
        }
    }

    private Stream<Arguments> getValue(Field field) {
        Object value = null;
        try {
            value = field.get(null); // Obtener el valor de la variable estática
        } catch (Exception ignored) {
        }
        return value == null ? null : (Stream<Arguments>) value;
    }
}

Y DE ESTA FORMA, podemos usar la anotacion @VariableSource en nuestros test parametrizados para pasarle un conjunto de datos.